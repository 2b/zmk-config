#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define GME 1
#define CLM 2
#define SYM 3
#define NAV 4
#define FUN 5

#define DESK_LT LC(LG(LEFT))
#define DESK_RT LC(LG(RIGHT))
#define TAB_RT  LC(TAB)
#define TAB_LT  LC(LS(TAB))

#include "combos.dtsi"

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <150>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
    retro-tap;
};

/ {
    behaviors {
        am: alpha_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "alpha mod-taps";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    multi_layers {
        compatible = "zmk,multi-layers";
        func_tristate {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W      &kp E      &kp R         &kp T          &kp Y         &kp U       &kp I      &kp O      &kp P
&am LCTRL A &am LGUI S &am LALT D &am LSHFT F   &kp G          &kp H         &am RSHFT J &am RALT K &am RGUI L &am RCTRL SQT
&kp Z       &kp X      &kp C      &kp V         &kp B          &kp N         &kp M       &kp COMMA  &kp DOT    &kp SLASH
                                  &mt LCTRL ESC &lt NAV BSPC   &lt SYM SPACE &mt RSHFT RET
            >;
        };

        game_layer {
            bindings = <
&kp TAB   &kp Q &kp W &kp E     &kp R       &kp Y    &kp U   &kp I     &kp O   &kp P
&kp ESC   &kp A &kp S &kp D     &kp F       &kp H    &kp J   &kp K     &kp L   &tog GME
&kp LSHFT &kp Z &kp X &kp C     &kp V       &kp N    &kp M   &kp COMMA &kp DOT &kp SLASH
                      &kp LCTRL &kp SPACE   &kp LALT &kp RET
            >;
        };

        colemak_layer {
            bindings = <
&kp Q       &kp W      &kp F      &kp P         &kp B          &kp J         &kp L       &kp U      &kp Y      &kp SQT
&am LCTRL A &am LGUI R &am LALT S &am LSHFT T   &kp G          &kp M         &am RSHFT N &am LALT E &am RGUI I &am RCTRL O
&kp Z       &kp X      &kp C      &kp D         &kp V          &kp K         &kp H       &kp COMMA  &kp DOT    &kp SLASH
                                  &mt LCTRL ESC &lt NAV BSPC   &lt SYM SPACE &mt RSHFT RET
            >;
        };

        symbol_layer {
            bindings = <
&kp N1   &kp N2   &kp N3   &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
&kp EXCL &kp AT   &kp HASH &kp DLLR  &kp PRCNT   &kp CARET &kp MINUS &kp UNDER &kp EQUAL &kp PLUS
&none    &none    &none    &kp SEMI  &kp AMPS    &kp STAR  &kp BSLH  &none     &none     &none
                           &kp LCTRL &trans      &trans    &kp LSHFT
            >;
        };

        nav_layer {
            bindings = <
&kp LA(F4)        &kp TAB_LT       &kp TAB_RT &kp LC(F4)    &kp C_VOL_UP   &kp HOME &kp PG_DN &kp PG_UP  &kp END    &kp PAUSE_BREAK
&am LCTRL DESK_LT &am LGUI DESK_RT &kp LALT   &am LSHFT TAB &kp C_VOL_DN   &kp LEFT &kp DOWN  &kp UP     &kp RIGHT  &kp C_AL_CALC
&tog CLM          &tog GME         &none      &kp LS(INS)   &kp C_PP       &kp INS  &kp DEL   &kp C_PREV &kp C_NEXT &kp PSCRN
                                              &kp LCTRL     &trans         &trans   &kp LSHFT
            >;
        };

        function_layer {
            bindings = <
&kp F1       &kp F2       &kp F3       &kp F4     &kp F5    &kp CAPS   &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp COMMA
&kp F6       &kp F7       &kp F8       &kp F9     &kp F10   &kp KP_NUM &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_DOT
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &kp F11    &kp F12   &kp KP_N0  &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_ENTER
                                       &bt BT_CLR &trans    &trans     &out OUT_TOG
            >;
        };
    };
};
